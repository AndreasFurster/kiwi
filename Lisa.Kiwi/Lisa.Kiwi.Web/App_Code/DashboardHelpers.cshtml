@helper NullCheck(object content)
{
	if (content == null)
	{
		@Resources.ReportProperties.ResourceManager.GetString("_null")
	}
	else if (content is bool)
	{
		@Resources.ReportProperties.ResourceManager.GetString("_" + content)
	}
	else
	{
		@content
	}
}

@helper Time(DateTimeOffset dateTime)
{
	string difference;
	
	//Calculating difference between current time and report time	
	var dateTimeDifference = DateTimeOffset.Now.Subtract(dateTime);
	var weeks = (int)Math.Round((double)dateTimeDifference.Days / 7);
	var remainingDays = dateTimeDifference.Days % 7;
	var monthDifference = ((DateTimeOffset.Now.Year * 12) + DateTimeOffset.Now.Month) - ((dateTime.Year * 12) + dateTime.Month);
		
	//Callers	
	var secondCaller = dateTimeDifference.Seconds == 1 ? Resources.Time.Second : Resources.Time.Seconds;
	var minuteCaller = dateTimeDifference.Minutes == 1 ? Resources.Time.Minute : Resources.Time.Minutes;
	var hourCaller = Resources.Time.Hour;
	var dayCaller = dateTimeDifference.Days == 1 ? Resources.Time.Day : Resources.Time.Days;
	var weekCaller = weeks == 1 ? Resources.Time.Week : Resources.Time.Weeks;
	var remainingDayCaller = remainingDays == 1 ? Resources.Time.Day : Resources.Time.Days;
	var monthCaller = monthDifference == 1 ? Resources.Time.Month : Resources.Time.Months;	
		
	//Checking what time should be shown
	if (dateTimeDifference.Hours < 1 && dateTimeDifference.Days < 1)
	{
		if (dateTimeDifference.Minutes < 1)
		{
			difference = String.Format("{0} {1} geleden", dateTimeDifference.Seconds, secondCaller);
		}
		else
		{
			difference = String.Format("{0} {1} geleden", dateTimeDifference.Minutes, minuteCaller);
		}
	}
	else if(dateTimeDifference.Hours < 12 && dateTimeDifference.Hours >= 1 && dateTimeDifference.Days < 1)
	{
		difference = String.Format("{0} {1} en {2} {3} geleden", dateTimeDifference.Hours, hourCaller, dateTimeDifference.Minutes, minuteCaller);	
	}
	else if (dateTimeDifference.Hours < 24 && dateTimeDifference.Hours >= 12 && dateTimeDifference.Days < 1)
	{
			difference = String.Format("{0} {1} geleden", dateTimeDifference.Hours, hourCaller);
	}
	else if(dateTimeDifference.Days < 7)
	{
			difference = String.Format("{0} {1} geleden", dateTimeDifference.Days, dayCaller);
	}
	else if(weeks < 4)
	{
			difference = remainingDays == 0 ? String.Format("{0} {1} geleden", weeks, weekCaller) 
							: String.Format("{0} {1} en {2} {3} geleden", weeks, weekCaller, remainingDays, remainingDayCaller);	
	}		
	else
	{
			difference = String.Format("{0} {1} geleden", monthDifference, monthCaller);
	}		
	@difference;	
}

@helper Capitalize(string value)
{
	if (String.IsNullOrEmpty(value))
	{
			@value;
	}
	else
	{
		@String.Format("{0}{1}", value.ToUpper()[0], value.Substring(1));
	}
}